<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Donnie&#39;s Blog</title>
  
  <subtitle>少年才背剑，转眼便江湖</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-28T08:56:36.152Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Donnie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简明Git使用方法</title>
    <link href="http://example.com/2021/05/27/%E7%AE%80%E6%98%8EGit%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/05/27/%E7%AE%80%E6%98%8EGit%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-27T07:37:40.000Z</published>
    <updated>2021-05-28T08:56:36.152Z</updated>
    
    <content type="html"><![CDATA[<p>近期做项目用Github比较频繁，简单记录一下Git的主要操作方式，比较复杂的部分就略过了，主要是以使用为目的</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><blockquote><p>版本库的创建</p><ul><li> Git的安装</li><li> 版本库的创建</li></ul><p>版本库的操作</p><ul><li> 文件操作</li><li> 版本回退</li><li> 修改撤销 </li></ul><p>远程库连接</p><ul><li>远程库添加与解除</li><li>从远程库克隆</li></ul><p>分支管理</p><ul><li>创建与合并分支</li><li>多人协作</li></ul><p>标签管理</p><ul><li>创建标签</li><li>操作标签</li></ul></blockquote><h2 id="版本库的创建"><a href="#版本库的创建" class="headerlink" title="版本库的创建"></a>版本库的创建</h2><hr><h3 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h3><p>在Ubuntu Linux上使用apt软件包管理工具进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>在windows上直接进入<a href="https://git-scm.com/downloads">Git官网</a>下载安装程序，而后按照默认选项安装即可</p><h3 id="版本库的创建-1"><a href="#版本库的创建-1" class="headerlink" title="版本库的创建"></a>版本库的创建</h3><p>选择一个合适的位置利用mkdir指令创建一个空目录，而后进入后输入指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>于是该目录就变成了Git可以管理的仓库，细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><h2 id="版本库的操作"><a href="#版本库的操作" class="headerlink" title="版本库的操作"></a>版本库的操作</h2><hr><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>在文件操作之前首先明确几个概念</p><p><strong>工作区</strong></p><p>就是电脑中能直接看见的目录</p><p><img src="https://i.loli.net/2021/05/28/Vc1mn4w6MZIaRSB.png" alt="working-dir"></p><p><strong>版本库</strong></p><p>工作区目录中有一个隐藏目录.git。这个是Git的版本库，版本库主要由两个部分组成，stage暂存区和分支区。</p><p><img src="https://i.loli.net/2021/05/28/nzqcBheNH58kMAG.jpg" alt="git-repo"></p><p> <strong>将文件添加至Git版本库中时，有三个步骤：</strong></p><p><strong>首先</strong>在工作区创建一个文件Read.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim/typora Read.txt</span><br></pre></td></tr></table></figure><p>将文件修改添加至暂存区，在添加至暂存区前，我们首先看一下git的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~/CS61A$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 1 commit.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">Read.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Git清楚的告诉我们，有一个文件出现了，而<code>Read.txt</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p><p><strong>而后</strong>我们创建文件这次操作添加至暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add Read.txt</span><br></pre></td></tr></table></figure><p><em>如果添加的是文件夹可以使用</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add vs/*</span><br></pre></td></tr></table></figure><p>如果想删除文件可以用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm Read.txt</span><br></pre></td></tr></table></figure><p>再次查看git的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~/CS61A$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 1 commit.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">new file:   Read.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Changes to be committed</code>我们发现git已经识别了这个文件，可见这个文件已经被添加到了暂存区。</p><p><strong>最后</strong>我们将文件创建这次操作提交至仓库的master分支（分支的概念后面会讲到）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit Read.txt -m <span class="string">&quot;commit&quot;</span></span><br></pre></td></tr></table></figure><p><em>如果想提交全部文件的操作可以用</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit&quot;</span></span><br></pre></td></tr></table></figure><p>这里的-m参数是对这次提交进行文字说明</p><p>再次查看git的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~/CS61A$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 2 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见此时暂存区为空，修改已提交至仓库</p><p>我们可以将创建文件并提交至仓库的过程用流程图表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[在工作区创建文件]&#x3D;&#x3D;&#x3D;&gt;B[将修改&#x2F;创建&#x2F;删除操作添加至暂存区]&#x3D;&#x3D;&#x3D;&#x3D;&gt;C[将操作提交至仓库]</span><br></pre></td></tr></table></figure><p>估计很多人都有疑问，为什么这里写的是操作，而不是将文件添加至暂存区，因为Git管理的是修改而不是文件，我们用一个例子来说明这个问题。</p><p>首先，我们在Read.txt中添加一段文字<code>hello me</code>，而后将这次操作添加到暂存区，我们查看此时的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 2 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">modified:   Read.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见此次修改已经添加到了暂存区，而后我们再对文件进行修改，增加一行<code>hello you</code>，不将此次修改添加至暂存区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 2 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">modified:   Read.txt</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">modified:   Read.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们执行提交指令将修改提交至仓库，而后查看git状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 8 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">modified:   Read.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们发现，未添加至暂存区的修改并未提交至仓库，我们查看一下工作区和最新版本库的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~/CS61A$ git diff -- Read.txt</span><br><span class="line">diff --git a/Read.txt b/Read.txt</span><br><span class="line">index 1f8eec4..12ee40e 100644</span><br><span class="line">--- a/Read.txt</span><br><span class="line">+++ b/Read.txt</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> hello world</span><br><span class="line"> hello me</span><br><span class="line">+hello you</span><br></pre></td></tr></table></figure><p>如果Git管理的是文件本身，那么文件在提交时是什么样，提交的文件就是什么样，然而经过对比发现，版本库的文件和工作区的文件是不一样，我们每次添加到暂存区的是对文件的操作步骤，比如创建删除文件，添加几行，删除几行，由于刚才添加<code>hello you</code>这一行文字的修改操作并未添加至暂存区，提交时只提交暂存区有的操作，因此该操作未提交至仓库。</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>上面i讲到，Git管理的是修改，如果我们在进行修改提交的过程中，不小心删除了最后一行<code>hello me</code> ，而我们又需要这行文字该怎么办呢？</p><p>这时候就需要利用版本回退的功能了。</p><p>在Git中，我们可以查看每次操作的记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~/CS61A$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">aa03a474011bcb97e9f596d3b5c9a1b517726d05 (HEAD -&gt; master) delete a line</span><br><span class="line">05491fda20edff579daf14f24b7afed61d591842 add a line</span><br><span class="line">a58d42838b1284034c4a9d52f0d2780ad251bda2 a</span><br><span class="line">f67db85d1deeb3d7ca0020a332ac4e07bccf12b0 all</span><br><span class="line">b96112ab41f972a9949e213347d7403dd2f8a03b 1</span><br></pre></td></tr></table></figure><p>我们要将版本回退到<code>delete a line</code>操作前，因此我们使用<code>reset</code>指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/CS61A$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at 05491fd add a line</span><br></pre></td></tr></table></figure><p>这里的HEAD^表示上一个版本，如果上两个版本则为^^,以此类推。</p><p>但是问题来了，如果我们现在又想回到<code>delete a line</code>版本该怎么办呢？版本已经回退了。</p><p>git有一个命令记录了你的每次命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/CS61A$ git reflog</span><br><span class="line">05491fd (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^</span><br><span class="line">aa03a47 HEAD@&#123;1&#125;: commit: delete a line</span><br><span class="line">05491fd (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: add a line</span><br></pre></td></tr></table></figure><p>于是我们就可以利用<code>aa03a47</code>这个id来回到原来版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard aa03a47</span><br><span class="line">HEAD is now at aa03a47 delete a line</span><br></pre></td></tr></table></figure><p>于是，版本又回来了。</p><h3 id="修改撤销"><a href="#修改撤销" class="headerlink" title="修改撤销"></a>修改撤销</h3><p>有的时候我们会因为手抖写错代码，比如我们在Read.txt（.sh）文件中添加一行‘rm -rf’，懂点Linux都知道这是个致命操作。</p><p><strong>如果你还没有将这次文件修改提交到暂存区</strong>，那么很简单，直接修改就好了，或者也可以使用指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- Read.txt</span><br></pre></td></tr></table></figure><p>工作区的修改就被丢弃了，工作区文件的内容和版本库文件的内容相同。</p><p><strong>如果你已经将文件修改添加到了暂存区</strong>，那么我们需要使用另一个指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD Read.txt</span><br></pre></td></tr></table></figure><p>reset指令不仅可以回退版本，当HEAD不^时，reset指令也可以将暂存区的修改操作移除，而后再利用<code>checkout</code>指令同步版本库和工作区内容。</p><p><strong>如果你已经将修改提交到了版本库</strong>，那么按照版本回退的方式进行即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>如果你已经将版本库内的内容推送到远程库，比如Github，那就只能听天由命了，谁运行，谁遭殃。</p><h2 id="远程库连接"><a href="#远程库连接" class="headerlink" title="远程库连接"></a>远程库连接</h2><hr><h3 id="远程库添加-解除"><a href="#远程库添加-解除" class="headerlink" title="远程库添加/解除"></a>远程库添加/解除</h3><p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库</p><p>（图借的廖雪峰大L的）：</p><p><img src="https://i.loli.net/2021/05/28/HYRADbO3nfjtW9T.png" alt="github-create-repo-1"></p><p>在Repository name填入<code>Read</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p><img src="https://i.loli.net/2021/05/28/P62pheNWtkZSVcB.png" alt="github-create-repo-2"></p><p>而后，我们在本地运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:xxxx/Read.git</span><br></pre></td></tr></table></figure><p>xxx处为你自己的Github账户名，就可以将本地的版本库和远程的库连接起来了。</p><p>将本地库所有内容推送至Github远程库的master分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push （-u） origin master</span><br></pre></td></tr></table></figure><p>加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令，不许需要加入-u参数。</p><p><strong>SSH警告</strong></p><p>当你第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#39;github.com (xx.xx.xx.xx)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added &#39;github.com&#39; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入<code>yes</code>前可以对照<a href="https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/">GitHub的RSA Key的指纹信息</a>是否与SSH连接给出的一致。</p><p><strong>解除远程库与本地库的关联关系</strong></p><p>如果我们需要解除本地库与远程库的关联关系，可以使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure><h3 id="远程库克隆"><a href="#远程库克隆" class="headerlink" title="远程库克隆"></a>远程库克隆</h3><p>我们有时需要把远程库从Github克隆下来，为了借鉴代码或是进行分布式工作，使用以下指令将远程库克隆至本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:xxx/Read.git</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><hr><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>在<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p><p><img src="https://i.loli.net/2021/05/28/X69umbEgxRBfh3w.png" alt="git-br-initial"></p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上</p><p><img src="https://i.loli.net/2021/05/28/EXNTRAfMmV2B63a.png" alt="git-br-create"></p><p>我们建立一个新分支<code>dev</code>并切换至新分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev    /   git switch -c dev</span><br></pre></td></tr></table></figure><p><em>如果切换至已有分支则</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev    /    git switch dev</span><br></pre></td></tr></table></figure><p>如果只是创建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure><p>从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022387118368/l" alt="git-br-dev-fd"></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src="https://i.loli.net/2021/05/28/dQuX31cxi6RTeDO.png" alt="git-br-ff-merge"></p><p>我们切换至主分支，而后将dev分支合并至主分支master</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure><p>而后我们可以保留分支，也可以删除分支，如果删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://i.loli.net/2021/05/28/tWO9ydfr5miY3EP.png" alt="git-br-policy"></p><p><strong>远程库克隆</strong></p><p>团队合作的过程中首先要将远程库克隆至本地，具体方式见前文远程库克隆一节</p><p>完成克隆后，Git自动把本地的master分支和远程的master分支对应起来了，默认远程仓库的名称为origin</p><p>查看远程库的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/CS61A$ git remote -v</span><br><span class="line">origingit@github.com:x/CS61A.git (fetch)</span><br><span class="line">origingit@github.com:x/CS61A.git (push)</span><br></pre></td></tr></table></figure><p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p><p><strong>分支的推送</strong></p><p>分支的推送有很多种模式，这里只介绍最简单的模式，假设，我们已经将远程库的master分支克隆到了本地，而后我们创建了一个新的分支dev，在新的分支进行工作，工作完毕后我们将dev分支合并至master分支，而后使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>就将该分支推送到了远程库</p><p><strong>分支的抓取</strong></p><p>在多人协作时可能会出现一些问题，比如有一天，你的小伙伴已经向origin/master分支推送了他的提交，而你碰巧也对同样的文件进行了修改，并试图推送，这时候你会发现，git提示推送失败，因为你的小伙伴的最新提交和你的提交有冲突。</p><p>因此我们要在推送前先将master最新情况从远程抓下来，然后在本地进行合并和解决冲突。</p><p>解决冲突的方法如下</p><p>我们知道当我们把远程的master分支抓取下来后，我们本地的dev分支和远程pull下来的master分支存在冲突</p><p><img src="https://i.loli.net/2021/05/28/ve3HlyfWtqB7bYN.png" alt="git-br-feature1"></p><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并会有冲突，我们查看 一下git的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 2 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">&quot;git commit&quot;</span>)</span><br><span class="line">  (use <span class="string">&quot;git merge --abort&quot;</span> to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">both modified:   Read.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Git告诉我们，Read.txt文件存在冲突，我们可以直接查看文件内容</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br></pre></td></tr></table></figure><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure><p>再提交修改给master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;conflict fixed&quot;</span></span><br><span class="line">[master cf810e4] conflict fixed</span><br></pre></td></tr></table></figure><p>Git告诉我们冲突被解决了，于是我们将dev分支合并至master，而后执行push</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br><span class="line">Counting objects: 6, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:x/Read.git</span><br><span class="line">   7a5e5dd..57c53ab  master -&gt; master</span><br></pre></td></tr></table></figure><p>成功。</p><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>为什么需要标签？</p><p>Git有commit，为什么还要引入tag？</p><p>“请把上周一的那个版本打包发布，commit号是6a5819e…”</p><p>“一串乱七八糟的数字不好找！”</p><p>如果换一个办法：</p><p>“请把上周一的那个版本打包发布，版本号是v1.2”</p><p>“好的，按照tag v1.2查找commit就行！”</p><p>所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上，而后敲击tag就可以打一个标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0</span><br></pre></td></tr></table></figure><p>利用<code>git tag</code>查看所有标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.0</span><br><span class="line">v2.0</span><br><span class="line">v2.1</span><br></pre></td></tr></table></figure><p>如果要对历史commit打标签，那就通过git log找到commit号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v0.9 f287d34</span><br></pre></td></tr></table></figure><p>查看每个标签的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0.9</span><br><span class="line">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add merge</span><br><span class="line"></span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后按照版本回退一节的方法使用<code>reset</code>指令回退至对应版本打包即可。</p><p>注意，标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p><h3 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h3><p>如果标签打错了，也可以删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.1</span><br><span class="line">Deleted tag <span class="string">&#x27;v0.1&#x27;</span> (was f15b0dd)</span><br></pre></td></tr></table></figure><p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>，或使用<code>git push origin --tags</code>推送所有标签。</p><p>如果要删除远程标签则先从本地删除标签，而后向远程同步删除指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0.9</span><br><span class="line">To github.com:x/Read.gi0t</span><br><span class="line"> - [deleted]         v0.9</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="https://www.runoob.com/git/git-tutorial.html">菜鸟教程Git</a></p><p>2.<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的Git教程</a></p><p>3.<a href="https://git-scm.com/">Git官方网站</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近期做项目用Github比较频繁，简单记录一下Git的主要操作方式，比较复杂的部分就略过了，主要是以使用为目的&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;blockquot</summary>
      
    
    
    
    <category term="软件文档" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Python数据分析精要</title>
    <link href="http://example.com/2021/05/24/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81/"/>
    <id>http://example.com/2021/05/24/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81/</id>
    <published>2021-05-24T10:53:01.000Z</published>
    <updated>2021-05-24T10:53:01.803Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Python爬虫精要</title>
    <link href="http://example.com/2021/05/24/Python%E7%88%AC%E8%99%AB%E7%B2%BE%E8%A6%81/"/>
    <id>http://example.com/2021/05/24/Python%E7%88%AC%E8%99%AB%E7%B2%BE%E8%A6%81/</id>
    <published>2021-05-24T10:52:26.000Z</published>
    <updated>2021-05-24T10:52:26.035Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>我走的路和高山的雪</title>
    <link href="http://example.com/2021/04/16/%E6%88%91%E8%B5%B0%E7%9A%84%E8%B7%AF%E5%92%8C%E9%AB%98%E5%B1%B1%E7%9A%84%E9%9B%AA/"/>
    <id>http://example.com/2021/04/16/%E6%88%91%E8%B5%B0%E7%9A%84%E8%B7%AF%E5%92%8C%E9%AB%98%E5%B1%B1%E7%9A%84%E9%9B%AA/</id>
    <published>2021-04-16T04:15:52.000Z</published>
    <updated>2021-04-16T06:55:54.277Z</updated>
    
    <content type="html"><![CDATA[<p>劫后余生，才知命运无常。</p><p>三场大火，烧光了所有希望，我站在熊熊烈焰面前，只一步就万劫不复，人类的悲欢从不相通，我只觉得他们吵闹，他们呼喊着，投来同情的目光，却只能远远的望着。这一刻我才发现，很多事情，除了自己咬着牙硬抗，没人能帮的了你。不怪朋友袖手旁观，也不怪父母相对无言，有些事情，你懂，他们未必也明白。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;劫后余生，才知命运无常。&lt;/p&gt;
&lt;p&gt;三场大火，烧光了所有希望，我站在熊熊烈焰面前，只一步就万劫不复，人类的悲欢从不相通，我只觉得他们吵闹，他们呼喊着，投来同情的目光，却只能远远的望着。这一刻我才发现，很多事情，除了自己咬着牙硬抗，没人能帮的了你。不怪朋友袖手旁观，也不怪</summary>
      
    
    
    
    <category term="沉思录" scheme="http://example.com/categories/%E6%B2%89%E6%80%9D%E5%BD%95/"/>
    
    
    <category term="人生" scheme="http://example.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>CS自学路线与课程推荐</title>
    <link href="http://example.com/2021/04/13/CS%E8%87%AA%E5%AD%A6%E8%B7%AF%E7%BA%BF%E4%B8%8E%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90/"/>
    <id>http://example.com/2021/04/13/CS%E8%87%AA%E5%AD%A6%E8%B7%AF%E7%BA%BF%E4%B8%8E%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90/</id>
    <published>2021-04-13T12:30:38.000Z</published>
    <updated>2021-04-13T15:33:43.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CS基础课程自学路线与课程推荐"><a href="#CS基础课程自学路线与课程推荐" class="headerlink" title="CS基础课程自学路线与课程推荐"></a>CS基础课程自学路线与课程推荐</h1><p>简单记录我在自学路上所接触和选择的一些优秀课程，供自己回顾，各位同样奋战在CS自学路上的朋友也可以留作参考</p><p>注：本人也在学习中，不是每一门课程都看过，里面每一门课程都需要几个月的时间奋战，我基本都是选择其一学习，不要陷入焦虑，加粗的是我学习的路线。</p><hr><h3 id="计算机入门"><a href="#计算机入门" class="headerlink" title="计算机入门"></a>计算机入门</h3><h5 id="公开课程："><a href="#公开课程：" class="headerlink" title="公开课程："></a>公开课程：</h5><ul><li><strong>哈佛大学 CS50</strong>   </li><li>斯坦福大学 CS101</li><li>麻省理工学院 6.00.1</li></ul><h5 id="书籍推荐："><a href="#书籍推荐：" class="headerlink" title="书籍推荐："></a>书籍推荐：</h5><ul><li>《编码》： 一本讲清编码原理的书</li></ul><hr><h3 id="计算机程序结构与抽象"><a href="#计算机程序结构与抽象" class="headerlink" title="计算机程序结构与抽象"></a>计算机程序结构与抽象</h3><h5 id="公开课程：-1"><a href="#公开课程：-1" class="headerlink" title="公开课程："></a>公开课程：</h5><ul><li><p><strong>加州大学伯克利分校  CS61A</strong></p></li><li><p>斯坦福大学 CS106A  [Python]  </p></li><li><p>卡内基梅隆大学 CMU 15-122 </p></li></ul><h5 id="书籍推荐：-1"><a href="#书籍推荐：-1" class="headerlink" title="书籍推荐："></a>书籍推荐：</h5><p>《计算机程序的构造和解释》</p><blockquote><p>SICP 可以教会你编程语言的核心思想，懂得了程序设计和语言构成，你就可以快速掌握一门语言，这对于学习安全或是软件移植都是很关键的。</p></blockquote><hr><h3 id="计算机系统架构与体系"><a href="#计算机系统架构与体系" class="headerlink" title="计算机系统架构与体系"></a>计算机系统架构与体系</h3><p>对于系统架构读过的不太多，网易云课堂上哈工大的计算机体系结构读了很疲惫，转战Nand2Tetris立马就兴奋了，不得不说有些国内讲的基础课程真的讲的太无聊了，听的都能睡着。</p><h5 id="公开课程：-2"><a href="#公开课程：-2" class="headerlink" title="公开课程："></a>公开课程：</h5><ul><li><strong>计算机系统要素  Nand2Tetris</strong>    </li></ul><blockquote><p>这本书讲的计算机架构自底向上的抽象，从简单的门电路开始讲起，慢慢构造CPU，主存，I/O，最后直接实现了一台基本的计算机硬件部分，这些都是纯靠Nand这个逻辑门硬搭建起来的你敢信，我当时就惊了。后半部分需要一些编程基础，但其实也还好，懂一点python的语法就没什么大问题，后半部分主要讲的是编译器和汇编器的实现，在加上构建了一个简单的操作系统。这门课好好学，真的是神课，学完你买一袋Nand门就能组台电脑（滑稽）。</p></blockquote><h5 id="书籍推荐：-2"><a href="#书籍推荐：-2" class="headerlink" title="书籍推荐："></a>书籍推荐：</h5><ul><li>计算机系统要素  Nand2Tetris的原书</li></ul><hr><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><p>问我为什么要先学数据结构与算法，很简单，考研啊！408的数据结构与算法占了35%，这个分你拿到了，再加上计网的简单部分有个15%，你就拿了5成的分数了，150分你已经拿到了75。</p><h5 id="公开课程：-3"><a href="#公开课程：-3" class="headerlink" title="公开课程："></a>公开课程：</h5><ul><li><strong>加州大学伯克利分校  CS61B</strong></li></ul><blockquote><p>cs61B也是门好课，虽然达不到神课的地步，但是学完了你应该就能刷leetcode了，这个成就还是很显著的，总比你刷C++ prime舒服多了吧。</p></blockquote><ul><li>斯坦福 CS106B</li><li>卡内基梅隆大学 CMU 15-210</li></ul><h5 id="书籍推荐：-3"><a href="#书籍推荐：-3" class="headerlink" title="书籍推荐："></a>书籍推荐：</h5><ul><li>算法导论  </li></ul><blockquote><p>老牌的算法大全，厚的能砸死人，但是确实看完能封神，一般都是浅浅看一遍。</p></blockquote><ul><li>大话数据结构</li></ul><blockquote><p>深入浅出的讲解数据结构，作为入门当小说看看挺好的。</p></blockquote><ul><li>算法图解</li></ul><blockquote><p>同样是入门书籍，看看培养兴趣挺好的。</p></blockquote><hr><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p>我的计划里是计网放在CSAPP前面的，因为无论是Linux，Github使用，还是环境架设，都对计算机网络的了解程度要求很高，有的时候你不懂计网，很多时候看不清网络拓扑，思路完全是混乱的，比如你要用Python爬虫，或者是Python利用漏洞攻击软件，你连流量通过什么方式传递到另一台主机都不知道，什么是端口，怎么监听，怎么发送流量到端口，怎么转发端口，这些都不知道，那你会完全手足无措。</p><h5 id="公开课程：-4"><a href="#公开课程：-4" class="headerlink" title="公开课程："></a>公开课程：</h5><ul><li>斯坦福大学 CS144</li><li>网易云课堂 《计算机网络》</li></ul><h5 id="书籍推荐：-4"><a href="#书籍推荐：-4" class="headerlink" title="书籍推荐："></a>书籍推荐：</h5><ul><li><strong>计算机网络自顶而下</strong>  </li></ul><blockquote><p>好，又是一本神书，如果说Nand2Tetris在架构层面从下到上剖析的清清楚楚，那这本书就是把网络从上往下一点一点拆开讲的清清楚楚，这本书看完，你基本上可以理解大部分网络的连接过程。</p></blockquote><ul><li>计算机网络(谢希仁版)</li></ul><blockquote><p>这本书是我本科时候唯一一本跟计算机沾点边的书，很无奈，整个本科期间什么计算机的课程都不开，讲了一堆废物课程，到最后同年的战友连C都不会敲，JX文化课程的悲哀和瞎掰，回归正题，那时候边上课边翻觉得太复杂了，完全看不懂，这本书最好还是在看完自顶而下有一个完整的概念之后再去深入理解比较好。</p></blockquote><hr><h3 id="计算机系统与运行"><a href="#计算机系统与运行" class="headerlink" title="计算机系统与运行"></a>计算机系统与运行</h3><p>学完了以上，基本上就在应用层编写代码无障碍了，这个能力很关键，无论是未来搞安全还是搞开发，搞研究，快速把想法实现的能力还是很关键的，再加上SICP的程序结构，掌握新语言已经难度不大了，甚至还可以试着读读编译原理看看能不能自己重写编译器。</p><h5 id="公开课程"><a href="#公开课程" class="headerlink" title="公开课程:"></a>公开课程:</h5><ul><li><strong>卡内基梅隆大学 CSAPP 配套课程  （B站有）</strong></li><li>卡内基梅隆大学 CMU 15-213</li><li>加州大学伯克利大学 CS61C</li><li>斯坦福大学 CS107 </li></ul><h5 id="书籍推荐：-5"><a href="#书籍推荐：-5" class="headerlink" title="书籍推荐："></a>书籍推荐：</h5><ul><li>深入理解计算机系统 CSAPP </li></ul><blockquote><p>计算机领域的圣经级别书籍，北大的计算机系统导论，南大的计算机系统课程都是基于CSAPP的，这本书把操作系统，计算机组成结构和计算机网络都连接起来，还讲了汇编的一些理论，整合了很多零散内容。</p></blockquote><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li>知乎文章《计算机名校路线课程》</li><li>网易云课堂  顶尖大学中文计算机课程</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CS基础课程自学路线与课程推荐&quot;&gt;&lt;a href=&quot;#CS基础课程自学路线与课程推荐&quot; class=&quot;headerlink&quot; title=&quot;CS基础课程自学路线与课程推荐&quot;&gt;&lt;/a&gt;CS基础课程自学路线与课程推荐&lt;/h1&gt;&lt;p&gt;简单记录我在自学路上所接触和选择的一</summary>
      
    
    
    
    <category term="考研之路" scheme="http://example.com/categories/%E8%80%83%E7%A0%94%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="学习路线" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
    <category term="计算机课程" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Markdown使用指南</title>
    <link href="http://example.com/2021/04/11/Markdown%E6%8C%87%E5%8D%97/"/>
    <id>http://example.com/2021/04/11/Markdown%E6%8C%87%E5%8D%97/</id>
    <published>2021-04-11T02:31:39.000Z</published>
    <updated>2021-04-11T13:26:53.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown使用-指南"><a href="#Markdown使用-指南" class="headerlink" title="Markdown使用 指南"></a><strong>Markdown使用 指南</strong></h1><hr><h2 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h2><hr><h3 id="使用-标记多级标题"><a href="#使用-标记多级标题" class="headerlink" title="使用#标记多级标题"></a>使用#标记多级标题</h3><blockquote><p>一级标题用#号来标记</p><p>二级标题用##号来标记</p><p>….. 依次类推</p></blockquote><h3 id="使用-和-标记一级和二级标题（部分支持）"><a href="#使用-和-标记一级和二级标题（部分支持）" class="headerlink" title="使用=和-标记一级和二级标题（部分支持）"></a>使用=和-标记一级和二级标题（部分支持）</h3><blockquote><p>一级标题用=======来标注</p><p>二级标题用————来标注</p></blockquote><hr><h2 id="Markdown段落格式"><a href="#Markdown段落格式" class="headerlink" title="Markdown段落格式"></a>Markdown段落格式</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><blockquote><p><em>斜体</em>   * *</p><p><strong>粗体</strong>  ** **</p><p><em><strong>斜粗体</strong></em>   * * *  * * *</p></blockquote><h3 id="线条"><a href="#线条" class="headerlink" title="线条"></a>线条</h3><blockquote><p>分割线 *********</p><p><del>删除线</del>  ~~ ~~</p><p><u>下划线</u>  <u> </u></p><p>脚注  <a href="%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E8%84%9A%E6%B3%A8">^脚注</a></p></blockquote><hr><h2 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h2><ul><li><p>第一项</p><ul><li><p>第一个元素</p><ul><li>第二个元素</li></ul></li></ul></li><li><p>第二项</p><ul><li>第一个元素</li><li>第二个元素 </li></ul></li></ul><hr><h2 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h2><h3 id="区块嵌套"><a href="#区块嵌套" class="headerlink" title="区块嵌套"></a>区块嵌套</h3><blockquote><p>区块引用符 &gt;</p><blockquote><p>第一层嵌套 &gt;&gt;</p></blockquote><blockquote><blockquote><p>第二层嵌套 &gt;&gt;&gt;</p></blockquote></blockquote></blockquote><h3 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h3><blockquote><ul><li>第一项<ul><li>1.1</li><li>1.2</li></ul></li><li>第二项<ul><li>2.1</li><li>2.2</li></ul></li><li>第三项</li></ul></blockquote><h3 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h3><ul><li><p>第一项</p><blockquote><p>学技术不仅是技术，而是梦想</p></blockquote></li><li><p>第二项 </p><blockquote><p>我们的目标是星辰大海。</p></blockquote></li></ul><hr><h2 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h2><h3 id="单个片段代码"><a href="#单个片段代码" class="headerlink" title="单个片段代码"></a>单个片段代码</h3><blockquote><p><code>printf()</code>函数</p></blockquote><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码块使用三个反引号建立，以下是部分语言的实例代码：</p><blockquote><p><strong>Python实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Javascript实例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;RUNO&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>PHP实例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><hr><h2 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h2><p>链接使用<a href="http://www.baidu.com/">链接名称</a>建立，格式为<a href=""></a> ，也可以用变量设置来建立一个链接，赋值在文档末尾进行</p><blockquote><p>这个链接用 1 作为网址变量 [Google][1]</p></blockquote><hr><h2 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h2><h3 id="通过markdown语法插入图片"><a href="#通过markdown语法插入图片" class="headerlink" title="通过markdown语法插入图片"></a>通过markdown语法插入图片</h3><p>Markdown 插入图片的语法格式如下：</p><blockquote><p><img src="" alt="属性文本"></p></blockquote><h3 id="通过Typora直接插入图片-编辑器必须是Typora编辑器"><a href="#通过Typora直接插入图片-编辑器必须是Typora编辑器" class="headerlink" title="通过Typora直接插入图片 (编辑器必须是Typora编辑器)"></a>通过Typora直接插入图片 (编辑器必须是Typora编辑器)</h3><blockquote><p>格式–&gt;图像–&gt;插入图片</p></blockquote><hr><h2 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h2><p>Markdown表格格式如下：</p><blockquote><p>| |为分割单元格，-表示长度，：：为中央对齐</p></blockquote><table><thead><tr><th align="center">数据统计表</th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th></tr></thead><tbody><tr><td align="center">文字</td><td align="center">1</td><td align="center">4</td><td align="center">5</td><td align="center">8</td><td align="center">9</td></tr><tr><td align="center">图标</td><td align="center">2</td><td align="center">3</td><td align="center">6</td><td align="center">7</td><td align="center">0</td></tr></tbody></table><hr><h2 id="Markdown-拓展技巧"><a href="#Markdown-拓展技巧" class="headerlink" title="Markdown 拓展技巧"></a>Markdown 拓展技巧</h2><h3 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。目前支持的HTML元素有：</p><blockquote><p>&lt;kbd&gt;元素：使用<kbd>Shift</kbd> +<kbd>W</kbd> 执行操作</p><p>&lt;b&gt;元素：<b>123</b>    </p><p>&lt;i&gt;元素：<i>admin</i></p><p>&lt;em&gt;元素：<em>admin</em></p><p>&lt;sup&gt;元素：A<sup>1</sup></p><p>&lt;br&gt; 元素：换行</p></blockquote><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字，Markdown 使用反斜杠转义特殊字符：</p><blockquote><p>\ * \ * 转义文本加粗</p></blockquote><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如输入：</p><blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br></pre></td></tr></table></figure></blockquote><p>会显示如下公式：</p><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h2><p>1.菜鸟教程 <u><a href="https://www.runoob.com/markdown/md-tutorial.html">https://www.runoob.com/markdown/md-tutorial.html</a></u></p><p>2.知乎专栏 <u><a href="https://zhuanlan.zhihu.com/p/67153848">https://zhuanlan.zhihu.com/p/67153848</a></u></p><p>[1] : <a href="http://www.google.com/">http://www.google.com</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown使用-指南&quot;&gt;&lt;a href=&quot;#Markdown使用-指南&quot; class=&quot;headerlink&quot; title=&quot;Markdown使用 指南&quot;&gt;&lt;/a&gt;&lt;strong&gt;Markdown使用 指南&lt;/strong&gt;&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=</summary>
      
    
    
    
    <category term="软件文档" scheme="http://example.com/categories/%E8%BD%AF%E4%BB%B6%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>世界很大，人心很小</title>
    <link href="http://example.com/2021/04/10/%E4%B8%96%E7%95%8C%E5%BE%88%E5%A4%A7%EF%BC%8C%E4%BA%BA%E5%BF%83%E5%BE%88%E5%B0%8F/"/>
    <id>http://example.com/2021/04/10/%E4%B8%96%E7%95%8C%E5%BE%88%E5%A4%A7%EF%BC%8C%E4%BA%BA%E5%BF%83%E5%BE%88%E5%B0%8F/</id>
    <published>2021-04-10T00:42:43.000Z</published>
    <updated>2021-04-10T00:43:43.602Z</updated>
    
    
    
    
    <category term="沉思录" scheme="http://example.com/categories/%E6%B2%89%E6%80%9D%E5%BD%95/"/>
    
    
    <category term="沉思录" scheme="http://example.com/tags/%E6%B2%89%E6%80%9D%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件管理与权限控制</title>
    <link href="http://example.com/2021/04/10/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E4%B8%8E%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2021/04/10/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E4%B8%8E%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</id>
    <published>2021-04-10T00:23:09.000Z</published>
    <updated>2021-04-11T13:27:10.826Z</updated>
    
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="权限控制" scheme="http://example.com/tags/%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python学习之路</title>
    <link href="http://example.com/2021/04/10/Python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://example.com/2021/04/10/Python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</id>
    <published>2021-04-10T00:17:36.000Z</published>
    <updated>2021-05-03T11:22:50.362Z</updated>
    
    <content type="html"><![CDATA[<p>this is an example</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;this is an example&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>计算机考研综述</title>
    <link href="http://example.com/2021/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E7%BB%BC%E8%BF%B0/"/>
    <id>http://example.com/2021/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E7%A0%94%E7%BB%BC%E8%BF%B0/</id>
    <published>2021-04-10T00:17:36.000Z</published>
    <updated>2021-04-10T00:21:25.283Z</updated>
    
    <content type="html"><![CDATA[<p>this is an example</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;this is an example&lt;/p&gt;
</summary>
      
    
    
    
    <category term="考研之路" scheme="http://example.com/categories/%E8%80%83%E7%A0%94%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="研招信息" scheme="http://example.com/tags/%E7%A0%94%E6%8B%9B%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
</feed>
